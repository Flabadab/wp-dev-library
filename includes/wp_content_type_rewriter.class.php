<?php

///TODO: use the library file:		wp_library_include('Singleton.class.php');
// instead, included below



/**
 * Generic rewriter helper for custom post types
 * @author zaus
 *
 */
class WP_Content_Type_Rewriter extends Singleton {
	
	
	/**
	 * Return singleton instance
	 * Workaround for PHP < 5.3.0
	 */
	static public function instance(){
		return parent::instance(__CLASS__);
	}//--	fn	instance
	
	
	/**
	 * Continue to restrict access, but still set up hooks
	 */
	protected function __construct(){
		/**
		 * Define the rewrite rules.
		 * [slug]/ redirect to index.php?post_type=locations
		 */
		add_filter('rewrite_rules_array',array(&$this, 'rewrite_rules_array'));
		/**
		 * Redirect the template to testimonials.php or show the xml data
		 * @see http://codex.wordpress.org/Template_Hierarchy
		 */
		add_action( 'template_redirect', array(&$this, 'template_redirect') );
		
		/**
		 * Flush the rewrite rules
		 * Refresh them in htaccess
		 */
		add_action('admin_init', array(&$this, 'flush_rewrite'));
		register_activation_hook( __FILE__, array(&$this, 'flush_rewrite') );
		register_deactivation_hook( __FILE__, array(&$this, 'locations_flush_rewrite') );
	}//--	fn	construct
	
	/**
	 * List of stuff to rewrite
	 * @var array
	 */
	private $queue = array();
	/**
	 * Exposes the list of stuff to rewrite, so we can use it in hooks and stuff
	 * @return array the list of item types & templates to rewrite & redirect
	 */
	public function queue() { return $this->queue; }
	
	
	
	/**
	 * Register a rewrite instance - stack it on the queue for later processing
	 * 
	 * typically $template_list will be something like array( 'list'=>"%s.php", "plugins/%1$s/templates/%1$s.php", "index.php", 'single'=>"single-%s.php", "plugins/%1$s/templates/single-%1$s.php", "single.php" )
	 * 
	 * @param string $id the identifier (i.e. the post-type name)
	 * @param array $template_list {optional} if given, will use these items as the templates to be located
	 */
	public function register($type, $template_list = null){
		$this->queue[$type] = $template_list;
	}
	
	
	
	#region ----------------------------- HOOKS ----------------------------
	
	function rewrite_rules_array($rules) {
		$newrules = array();
		
		//loop through queue to process each type
		foreach($this->queue as $type => $templates) :
			$info = get_post_type_object($type);
			
			//ignore if not there?
			if( empty($info) ) continue;
			
			#pbug('--'.$type, $info->rewrite['slug'], $info);
		
			// rules copied from whatever generated by reed-write
			$newrules[$info->rewrite['slug'].'/?$'] = 'index.php?post_type='.$info->name;
			$newrules[$info->rewrite['slug'].'/feed/(feed|rdf|rss|rss2|atom)/?$'] = 'index.php?post_type='.$info->name.'&feed=$matches[1]';
			$newrules[$info->rewrite['slug'].'/(feed|rdf|rss|rss2|atom)/?$'] = 'index.php?post_type='.$info->name.'&feed=$matches[1]';
			$newrules[$info->rewrite['slug'].'/page/?([0-9]{1,})/?$'] = 'index.php?post_type='.$info->name.'&paged=$matches[1]';
			
		endforeach;	// queue
		
		#pbug($newrules, $rules);
		return $newrules + $rules;
	}//--	fn	rewrite_rules_array
	
	
	private function _applyMask(&$mask, $key, $replacement) {
		$mask = sprintf($mask, $replacement);
	}
	
	/**
	 * Redirect the template to testimonials.php or show the xml data
	 * @see http://codex.wordpress.org/Template_Hierarchy
	 */
	function template_redirect() {
		global $wp_query;
		
		//loop through queue to process each type
		foreach($this->queue as $type => $templates) :
			
			//necessary?
			#$info = get_post_type_object($type);
			
			// use defaults if none given
			if( empty($templates) ):
				$templates = array(
					'list'=>array('%s.php', 'plugins/%1$s/templates/%1$s.php', 'index.php')
					, 'single'=>array('single-%s.php', 'plugins/%1$s/templates/single-%1$s.php', 'single.php')
				);
			endif;
			
			if (isset($wp_query->query_vars)):
				$post_type = isset($wp_query->query_vars) ? $wp_query->query_vars['post_type'] : '';
				//is archive
				if (!is_robots() && !is_feed() && !is_trackback() && !is_single() && $type == $post_type):
					$wp_query->is_home = false;
					$wp_query->is_custom_post_type_archive = true;
					array_walk( $templates['list'], array(&$this, '_applyMask'), $type );
					locate_template( $templates['list'], true );
					die();
				endif;
				//is single
				if (!is_robots() && !is_feed() && !is_trackback() && is_single() && $type == $post_type):
					$wp_query->is_home = false;
					$wp_query->is_custom_post_type_archive = false;
					array_walk( $templates['single'], array(&$this, '_applyMask'), $type );
					locate_template( $templates['single'], true );
					die();
				endif;
			endif;
			
		endforeach;	// queue
	}//--	fn	template_redirect
	
	
	/**
	 * Flush the rewrite rules
	 * Refresh them in htaccess
	 */
	function flush_rewrite() {
		global $wp_rewrite;
		$wp_rewrite->flush_rules();
	}
	
	#endregion ----------------------------- HOOKS ----------------------------

	
}///---	class	ABTCore_Content_Type_Rewriter








//
//class SingletonExample2 extends Singleton {
//	#region ---------- FACTORY --------------
//	
//	/**
//	 * Return singleton instance
//	 * Workaround for PHP < 5.3.0
//	 */
//	static public function instance(){
//		return parent::instance(__CLASS__);
//	}//--	fn	instance
//	
//	#endregion ---------- FACTORY --------------
//	
//	private $foo = 'foo';
//	
//	public function getFoo(){ return $this->foo; }
//	
//	public function init($foo){ $this->foo = $foo; }
//}///---	SingletonExample
//
//$pagination = SingletonExample1::instance();	//prepare for pagination
//echo '<h3>SingletonExample1::printInstances</h3>';
//SingletonExample1::printInstances();
//
//$example = SingletonExample2::instance();
//echo '<h3>SingletonExample2::printInstances</h3>';
//SingletonExample2::printInstances();
//$example->init('bar');
//
//echo '<h3>SingletonExample1::printInstances</h3>';
//SingletonExample1::printInstances();

